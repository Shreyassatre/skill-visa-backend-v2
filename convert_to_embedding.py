import json
import time
import sys
import os
from dotenv import load_dotenv
import requests

# --- Configuration ---
input_json_path = "aus_visa_occupations_output2.json"  # The JSON file generated by the previous script
output_json_path = "aus_visa_occupations_with_embeddings.json"  # Name for the new output file

# --- Load Environment Variables ---
print("Loading environment variables...")
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    print("Error: GOOGLE_API_KEY not found in .env file")
    sys.exit(1)
print("API key loaded successfully.")

# --- Function to get Gemini text-embedding-004 embeddings ---
def get_gemini_embedding(text, api_key):
    url = "https://generativelanguage.googleapis.com/v1/models/text-embedding-004:embedContent"
    headers = {
        "Content-Type": "application/json"
    }
    params = {
        "key": api_key
    }
    data = {
        "model": "models/text-embedding-004",
        "content": {
            "parts": [
                {
                    "text": text
                }
            ]
        }
    }
    
    response = requests.post(url, headers=headers, params=params, json=data)
    
    if response.status_code != 200:
        raise Exception(f"API request failed with status code {response.status_code}: {response.text}")
    
    result = response.json()
    # Extract the embedding from the response
    embedding = result.get("embedding", {}).get("values", [])
    return embedding

# --- Load the existing JSON data ---
print(f"Loading JSON data from: {input_json_path}...")
try:
    with open(input_json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    print(f"Loaded {len(data)} entries.")
except FileNotFoundError:
    print(f"Error: Input JSON file not found at '{input_json_path}'")
    sys.exit(1)
except json.JSONDecodeError as e:
    print(f"Error decoding JSON from '{input_json_path}': {e}")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred while loading JSON: {e}")
    sys.exit(1)

# --- Generate Embeddings and Add to Data ---
print("Generating embeddings for 'Occupation' field using Gemini text-embedding-004...")
start_time = time.time()
processed_count = 0
skipped_count = 0

for idx, entry in enumerate(data):
    occupation_text = entry.get("Occupation")
    # Check if Occupation exists and is a non-empty string
    if occupation_text and isinstance(occupation_text, str) and occupation_text.strip():
        try:
            # Generate the embedding using Gemini API
            embedding_vector = get_gemini_embedding(occupation_text, api_key)
            entry['occupation_embedding'] = embedding_vector
            processed_count += 1
        except Exception as e:
            print(f"Warning: Error generating embedding for '{occupation_text}': {e}")
            entry['occupation_embedding'] = None  # Assign None if embedding fails
            skipped_count += 1
    else:
        # Handle cases where Occupation is missing, None, or empty
        entry['occupation_embedding'] = None
        skipped_count += 1
    
    # Optional: Add a progress indicator for large files
    if (idx + 1) % 10 == 0:
        elapsed = time.time() - start_time
        print(f" Processed {idx + 1}/{len(data)} entries... ({elapsed:.2f}s elapsed)")
    
    # Add a small delay to avoid hitting rate limits
    if (idx + 1) % 60 == 0:
        time.sleep(1)

end_time = time.time()
print(f"Embedding generation complete.")
print(f" Successfully generated embeddings for {processed_count} entries.")
if skipped_count > 0:
    print(f" Skipped {skipped_count} entries due to missing or invalid 'Occupation' field or embedding errors.")
print(f" Total time taken: {end_time - start_time:.2f} seconds.")

# --- Save the updated data to a new JSON file ---
print(f"Saving updated JSON data with embeddings to: {output_json_path}...")
try:
    with open(output_json_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    print("Successfully saved updated JSON.")
except Exception as e:
    print(f"An error occurred while saving the updated JSON file: {e}")