import json
from sentence_transformers import SentenceTransformer
import time
import sys

# --- Configuration ---
input_json_path = "aus_visa_occupations_output2.json"  # The JSON file generated by the previous script
output_json_path = "aus_visa_occupations_with_embeddings.json" # Name for the new output file

# Choose a lightweight embedding model.
# 'all-MiniLM-L6-v2' is a very good general-purpose lightweight model.
# Other options: 'paraphrase-MiniLM-L3-v2', 'multi-qa-MiniLM-L6-cos-v1'
model_name = 'all-MiniLM-L6-v2'

# --- Load the Embedding Model ---
print(f"Loading sentence transformer model: '{model_name}'...")
# This might take a moment the first time as it downloads the model weights
try:
    model = SentenceTransformer(model_name)
    print("Model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    print("Ensure 'sentence-transformers' and its dependencies (like torch/tensorflow) are installed.")
    sys.exit(1)

# --- Load the existing JSON data ---
print(f"Loading JSON data from: {input_json_path}...")
try:
    with open(input_json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    print(f"Loaded {len(data)} entries.")
except FileNotFoundError:
    print(f"Error: Input JSON file not found at '{input_json_path}'")
    sys.exit(1)
except json.JSONDecodeError as e:
    print(f"Error decoding JSON from '{input_json_path}': {e}")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred while loading JSON: {e}")
    sys.exit(1)

# --- Generate Embeddings and Add to Data ---
print("Generating embeddings for 'Occupation' field...")
start_time = time.time()
processed_count = 0
skipped_count = 0

for entry in data:
    occupation_text = entry.get("Occupation")

    # Check if Occupation exists and is a non-empty string
    if occupation_text and isinstance(occupation_text, str) and occupation_text.strip():
        try:
            # Generate the embedding (returns a numpy array)
            embedding_vector = model.encode(occupation_text)
            # Convert numpy array to a standard Python list for JSON serialization
            entry['occupation_embedding'] = embedding_vector.tolist()
            processed_count += 1
        except Exception as e:
            print(f"Warning: Error generating embedding for '{occupation_text}': {e}")
            entry['occupation_embedding'] = None # Assign None if embedding fails
            skipped_count += 1
    else:
        # Handle cases where Occupation is missing, None, or empty
        entry['occupation_embedding'] = None
        skipped_count += 1

    # Optional: Add a progress indicator for large files
    if (processed_count + skipped_count) % 100 == 0 and (processed_count + skipped_count) > 0:
         elapsed = time.time() - start_time
         print(f"  Processed {processed_count + skipped_count}/{len(data)} entries... ({elapsed:.2f}s elapsed)")


end_time = time.time()
print(f"Embedding generation complete.")
print(f"  Successfully generated embeddings for {processed_count} entries.")
if skipped_count > 0:
    print(f"  Skipped {skipped_count} entries due to missing or invalid 'Occupation' field or embedding errors.")
print(f"  Total time taken: {end_time - start_time:.2f} seconds.")


# --- Save the updated data to a new JSON file ---
print(f"Saving updated JSON data with embeddings to: {output_json_path}...")
try:
    with open(output_json_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    print("Successfully saved updated JSON.")
except Exception as e:
    print(f"An error occurred while saving the updated JSON file: {e}")